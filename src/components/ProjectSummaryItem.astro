---
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import OptionalAnchor from "@/components/OptionalAnchor.astro";
import DefaultThumbnail from "@/components/DefaultThumbnail.astro";
import { getImageAsset } from "@/utils";

const cleanWebsite = (url: string) => url
	.replace(/^https?:\/\//, "")
	.replace(/\/$/, "");

const ThumbnailWidth = 200;
const Thumbnail2X = 2 * ThumbnailWidth;
const IconClass = `
	inline-block
	mr-1
	min-w-[1.5em]
	text-center
	data-[icon^=fa:github]:top-[-.1em]
	data-[icon^=fa:github]:relative
`;
const ThumbnailClass = `
	aspect-square
	object-contain
	object-top
	w-4col
	h-auto
	max-w-none
`;

const {
	project: {
		data: {
			status,
			name,
			thumbnail,
			descriptionHTML,
			technologies,
			repos,
			slack,
			website,
		}
	}
} = Astro.props;

const url = repos?.[0];
const isExternal = thumbnail?.startsWith("http") ?? false;
const localImageMetadata = thumbnail && !isExternal
	? await getImageAsset(thumbnail)
	: null;

---

<li class="flex flex-row items-start gap-1u mb-3u last:mb-0">
	<OptionalAnchor href={url}>
		{thumbnail && isExternal ? (
			<img class={ThumbnailClass} src={thumbnail} alt={name} width={ThumbnailWidth} />
		) : localImageMetadata ? (
			<Image
				class={ThumbnailClass}
				src={localImageMetadata}
				alt={name}
				widths={[ThumbnailWidth, Thumbnail2X]}
				sizes={`(max-width: 768px) ${ThumbnailWidth}px, ${Thumbnail2X}px`}
			/>
		) : (
			<DefaultThumbnail size={ThumbnailWidth} class="w-4col" />
		)}
	</OptionalAnchor>

	<article class="flex-1 prose">
		<h3 class="text-3xl font-semibold font-condensed mb-1u not-prose trim-start">
			<OptionalAnchor href={url} class="text-text-base! decoration-text-base/20! hover:decoration-text-base!">
				{name}
			</OptionalAnchor>
		</h3>

		{/* descriptionHTML is formatted as a <p> tag */}
		<Fragment set:html={descriptionHTML} />

		{technologies &&
			<h4>Tech stack</h4>
			<p>{technologies.join(", ")}</p>
		}

		<ul class="*:my-3 not-prose" role="list">
			{(slack && status !== "completed") &&
				<li>
					<Icon name={"fa:slack"} class={IconClass} aria-label="Slack icon" />
					Join: <a href={slack.url}>{slack.name}</a>
				</li>
			}

			{repos?.length &&
				<>
					{repos.map((url: string) => (
						<li>
							<Icon name={"fa:github"} class={IconClass} aria-label="GitHub icon" />
							Contribute: <a href={url}>{url.replace(/https?:\/\/(www\.)?github\.com\//, "")}</a>
						</li>
					))}
				</>
			}

			{website &&
				<li>
					<Icon name={"fa:external-link"} class={IconClass} aria-label="External link icon" />
					Visit: <a href={website}>{cleanWebsite(website)}</a>
				</li>
			}
		</ul>
	</article>
</li>
