---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import DefaultThumbnail from "./DefaultThumbnail.astro";
import { base, getImageAsset, formatShortMDY } from "@/utils";

interface Props {
	post: CollectionEntry<"blog">;
}

// the thumbnail item is set to 14rem square, and the largest base font size is
// 21px, so double that to support a max 2X image
// TODO: fix this calculation to make it more generic
const ThumbnailUnits = 17.5;
const ThumbnailWidth = ThumbnailUnits * 21;
const Thumbnail2X = 2 * ThumbnailWidth;

const {
	post: {
		id,
		data: {
			title,
			image,
			image_alt = "",
			date,
			descriptionHTML,
		}
	}
} = Astro.props;
const thumbnailImage = image && await getImageAsset(image);
const postURL = base("/blog/" + id);
const dateString = formatShortMDY(date);
// ideally we'd pass this thumbnailSize string into the style tag for the
// thumbnail width/height below, but doing so causes the var to be added in a
// style attribute on every single element in this component, which is pretty
// ugly.  for now, just hardcode 14rem in the style.
const thumbnailSize = `${ThumbnailUnits}rem`;
---

<li class="mb-2u flex flex-row gap-1u">
	<a href={postURL}>
			{thumbnailImage
				? <Image class="thumbnail aspect-square object-cover object-center w-4col"
						src={thumbnailImage}
						alt={image_alt}
						widths={[Thumbnail2X]}
						sizes=`${Thumbnail2X}px`
					/>
				: <DefaultThumbnail size={thumbnailSize} />
			}
	</a>
	<div class="flex-1">
		<time class="block text-gray-500 mb-2 leading-none" datetime={date?.toISOString()}>{dateString}</time>
		<h3 class="text-2xl font-semibold font-condensed mb-6"><a href={postURL}>{title}</a></h3>
		{/* descriptionHTML is formatted as a <p> tag - Tailwind prose handles paragraph styling if applied upstream */}
		<Fragment set:html={descriptionHTML} />
	</div>
</li>
